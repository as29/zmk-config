/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

/* Uncomment to enable a custom macro layer
 * Needs the following additional files:
 * "custom_macros.dtsi" to define the macro behaviours
 * "custom_macros_keymap.dtsi" to bind them
 */
//#define ENABLE_CUSTOM_MACROS

#define DEF     0   // The default QWERTY layer
#define SYM     1   // Layer for symbols
#define NAV     2   // Layer for navigation
#define NUM     3   // Layer for numbers and function keys
#define CON     4   // Configuration layer

// Define only if custom macros are enabled
#ifdef ENABLE_CUSTOM_MACROS
  #define MAC     5   // Custom macro layer
#endif

// defining a dummy key code for the double quotes macro
#define DUMMY   6

/*
 * Including macros and combos
 */
#include "macros.dtsi"
#include "combos.dtsi"


/*
 * Defining the CON layer to be activated only if the 
 * SYM and NAV layers are activated
 */
/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        
        config_layer {
          if-layers = <SYM NAV>;
          then-layer = <CON>;
        };

// Define only if custom macros are enabled through config
#ifdef ENABLE_CUSTOM_MACROS
        custom_macro_layer {
          if-layers = <NUM NAV>;
          then-layer = <MAC>;
        };
#endif

    };
  };


/ {
    behaviors {
    
      // Home row mods behaviour
      hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <350>;
        quick-tap-ms = <125>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };
      
      /*
       * Special implementation for home row mod to
       * accomodate the double quotes macro. Calls the dqr
       * behavior when tapped, which in turn calls the
       * double quotes macro `m_dquotes` only if the shift
       * key was held.
       */
      dq_hm: double_quotes_balanced_homerow_mod {
        compatible = "zmk,behavior-hold-tap";
        label = "DQ_HOMEROW_MOD";
        #binding-cells = <2>;
        tapping-term-ms = <350>;
        quick-tap-ms = <125>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&dqr>;
      };

    
      /* 
       * Home row mods behaviour for SHIFT keys with lower
       * tapping term
       */
      shm: shift_homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "SHIFT_HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <125>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };
      
      /*
       * Morphing behaviour for single quotes to call the  
       * double quotes macro when used with LSHFT or RSHFT
       */
      dqr: dquotes_resolve {
        compatible = "zmk,behavior-mod-morph";
        label = "DOUBLE_QUOTES_RESOLVE";
        #binding-cells = <0>;
        bindings = <&kp SQT>, <&m_dquotes>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      
      /*
       * Morphing behaviour for entering or exiting the app-
       * switcher space, bound to the left thumb encoder
       * switch. Will open the app switcher space or close
       * it if already open, activating the highlighted
       * app - which can be selected using the scroll.
       */
      sw_app: switch_app {
        compatible = "zmk,behavior-mod-morph";
        label = "SWITCH_APP";
        #binding-cells = <0>;
        bindings
          = <&m_enter_app_switch>
          , <&m_exit_app_switch>
          ;
        mods = <(MOD_LALT)>;
      };
    };
    
    keymap {
      compatible = "zmk,keymap";

      default_layer {
        label = "Qwerty";
      // ------------------------------------------------------------------
      // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
      // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  '  |
      // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
      // | MUTE| ESC | BKSP| DEL |SWAPP|   |SLWRD| ENT  | SPC | TAB |PRSCR|
        bindings = <
          &kp Q         &kp W         &kp E           &kp R           &kp T         &kp Y       &kp U           &kp I           &kp O         &kp P
          &hm LGUI A    &hm LALT S    &shm LSHFT D    &hm LCTRL F     &kp G         &kp H       &hm LCTRL J     &shm RSHFT K    &hm LALT L    &dq_hm RGUI DUMMY
          &kp Z         &kp X         &kp C           &kp V           &kp B         &kp N       &kp M           &kp COMMA       &kp DOT       &kp FSLH
          &kp C_MUTE    &lt SYM ESC   &kp BSPC        &lt NUM DEL     &sw_app       &m_sl_wd    &kp RET         &kp SPACE       &lt NAV TAB   &kp LG(LS(S))
        >;
                        
        sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp LEFT RIGHT &inc_dec_kp DOWN UP &inc_dec_kp LC(LS(RIGHT)) LC(LS(LEFT))>; 
      };

      symbol_layer {
        label = "Symbol";
      // -----------------------------------------------------------------
      // |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  ~  |  +  |
      // |CWORD|  =  |  _  |  -  |  `  |   |     |  (  |  )  |  ;  |  :  |
      // | CAPS| NUM |  [  |  ]  | NAV |   |     |  {  |  }  |  |  |  \  |
      // |     |     |     |     |     |   |     |     |     |     |     |
        bindings = <
          &kp EXCL    &kp AT    &kp HASH    &kp DLLR    &kp PRCNT       &kp CARET   &kp AMPS    &kp STAR    &kp TILDE   &kp PLUS 
          &caps_word  &kp EQUAL &kp UNDER   &kp MINUS   &kp GRAVE       &none       &m_parens   &kp RPAR    &kp SEMI    &kp COLON
          &kp CAPS    &to NUM   &m_brackets &kp RBKT    &to NAV         &none       &m_braces   &kp RBRC    &kp PIPE    &kp BSLH
          &trans      &trans    &trans      &trans      &trans          &trans      &trans      &trans      &trans      &trans
        >;
                        
        sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp LEFT RIGHT &inc_dec_kp PG_DN PG_UP &inc_dec_kp LC(PG_DN) LC(PG_UP)>;
      };
                
      navigation_layer {
        label = "NavCom";
      // -----------------------------------------------------------------
      // | REDO|     | DEF |     | ENT |   | HOME| P.Wd|  UP | N.Wd| END |
      // | ALL |SAVE |LSHFT| CTRL| SPC |   |     | LFT | DWN | RGT |PG UP|
      // | UNDO| CUT | CPY | PST | TAB |   | NUM | BSWd|     | DLWd|PG DN|
      // |     |     |     |     |     |   |     |     |     |     |     |
        bindings = <
          &kp LC(Y)   &none     &to DEF     &none       &kp RET       &kp HOME    &kp LC(LEFT)    &kp UP    &kp LC(RIGHT)   &kp END
          &kp LC(A)   &kp LC(S) &kp LSHFT   &kp LCTRL   &kp SPACE     &none       &kp LEFT        &kp DOWN  &kp RIGHT       &kp PG_UP
          &kp LC(Z)   &kp LC(X) &kp LC(C)   &kp LC(V)   &kp TAB       &to NUM     &kp LC(BSPC)    &none     &kp LC(DEL)     &kp PG_DN
          &trans      &trans    &trans      &trans      &trans        &trans      &trans          &trans    &trans          &trans
        >;
                        
        sensor-bindings = <&inc_dec_kp PG_DN PG_UP &inc_dec_kp LC(PG_UP) LC(PG_DN) &inc_dec_kp DOWN UP &inc_dec_kp RIGHT LEFT>;
      };
                
      numfun_layer {
        label = "NumFun";
      // -----------------------------------------------------------------
      // |  F9 | F10 | F11 | F12 | ENT |   |  *  |  7  |  8  |  9  |  +  |
      // |  F5 |  F6 |  F7 |  F8 | SPC |   |  0  |  4  |  5  |  6  |  -  |
      // |  F1 |  F2 |  F3 |  F4 | TAB |   |  /  |  1  |  2  |  3  |  .  |
      // |     |     |     |     |     |   |     |     |     |     |     |
        bindings = < 
          &kp F9    &kp F10   &kp F11   &kp F12   &kp RET           &kp KP_MULTIPLY   &kp KP_N7   &kp KP_N8   &kp KP_N9   &kp KP_PLUS
          &kp F5    &kp F6    &kp F7    &kp F8    &kp SPACE         &kp KP_N0         &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp KP_MINUS
          &kp F1    &kp F2    &kp F3    &kp F4    &kp TAB           &kp KP_DIVIDE     &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp KP_DOT
          &trans    &trans    &trans    &trans    &trans            &trans            &trans      &trans      &trans      &trans
        >;
                        
        sensor-bindings = <&inc_dec_kp PG_DN PG_UP &inc_dec_kp END HOME &inc_dec_kp DOWN UP &inc_dec_kp RIGHT LEFT>;
      };
                
      config_layer {
        label = "CONFIG";
      // -----------------------------------------------------------------
      // | BT1 | BT2 | BT3 | BT4 | BT5 |   |     |O USB|     |     |E.POW|
      // |     |     |     |     |     |   |     |     |     |     |     |
      // |BTCLR|     |     |     |O BLE|   |     |     |     |     |     |
      // |     |     |     |     |     |   |     |     |     |     |     |
        bindings = <
          &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4      &none     &out OUT_USB  &none     &none     &ext_power EP_TOG
          &none           &none           &none           &none           &none             &none     &none         &none     &none     &none
          &bt BT_CLR      &none           &none           &none           &out OUT_BLE      &none     &none         &none     &none     &none
          &trans          &trans          &trans          &trans          &trans            &trans    &trans        &trans    &trans    &trans
        >;
                        
        sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp LEFT RIGHT &inc_dec_kp PG_DN PG_UP &inc_dec_kp LC(PG_DN) LC(PG_UP)>;
      };
      
// Define only if custom macros are enabled through config
#ifdef ENABLE_CUSTOM_MACROS
      #include "custom_macros_keymap.dtsi"
#endif

    };
  };